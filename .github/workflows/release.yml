name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-22.04
          - os: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.os == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: pnpm install

      - name: Build and Release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'Warp Plus ${{ github.ref_name }}'
          releaseBody: |
            ## 🎉 Warp Plus ${{ github.ref_name }}
            
            ### 📦 下载安装包
            - **Windows**: 下载 `.msi` 或 `.exe` 文件
            - **Linux**: 下载 `.deb` 或 `.AppImage` 文件
            - **macOS**: 下载 `.dmg` 文件
            
            ### 🔗 相关链接
            - QQ 交流群: [1048579623](https://qm.qq.com/q/kxKOBv48bC)
            - GitHub: [Warp-Plus](https://github.com/hj01857655/Warp-Plus)
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.os == 'macos-latest' && '--target universal-apple-darwin' || '' }}

  generate-updater-json:
    name: Generate latest.json
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Download release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG="${GITHUB_REF_NAME}"
          mkdir -p assets
          gh release download "$TAG" --dir assets --repo "$GITHUB_REPOSITORY" --pattern "*.sig" || true
          gh release download "$TAG" --dir assets --repo "$GITHUB_REPOSITORY" --pattern "*.exe" || true
          gh release download "$TAG" --dir assets --repo "$GITHUB_REPOSITORY" --pattern "*.AppImage" || true
          gh release download "$TAG" --dir assets --repo "$GITHUB_REPOSITORY" --pattern "*.app.tar.gz" || true
          ls -la assets/

      - name: Generate latest.json
        run: |
          TAG="${GITHUB_REF_NAME}"
          VERSION="${TAG#v}"
          PUB_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          BASE_URL="https://github.com/$GITHUB_REPOSITORY/releases/download/$TAG"
          
          # Find signature and URL for each platform
          WIN_SIG=""; WIN_URL=""
          LINUX_SIG=""; LINUX_URL=""
          MAC_SIG=""; MAC_URL=""
          
          cd assets
          for sig_file in *.sig; do
            [ -f "$sig_file" ] || continue
            base_file="${sig_file%.sig}"
            
            if [ -f "$base_file" ]; then
              sig_content=$(cat "$sig_file")
              url="$BASE_URL/$base_file"
              
              case "$base_file" in
                *.exe) WIN_SIG="$sig_content"; WIN_URL="$url";;
                *.AppImage) LINUX_SIG="$sig_content"; LINUX_URL="$url";;
                *.app.tar.gz) MAC_SIG="$sig_content"; MAC_URL="$url";;
              esac
            fi
          done
          
          # Generate JSON
          cat > latest.json <<EOF
          {
            "version": "$VERSION",
            "notes": "Warp Plus $TAG",
            "pub_date": "$PUB_DATE",
            "platforms": {
          EOF
          
          first=true
          if [ -n "$WIN_URL" ] && [ -n "$WIN_SIG" ]; then
            [ "$first" = "false" ] && echo "," >> latest.json
            echo "    \"windows-x86_64\": {\"signature\": \"$WIN_SIG\", \"url\": \"$WIN_URL\"}" >> latest.json
            first=false
          fi
          
          if [ -n "$LINUX_URL" ] && [ -n "$LINUX_SIG" ]; then
            [ "$first" = "false" ] && echo "," >> latest.json
            echo "    \"linux-x86_64\": {\"signature\": \"$LINUX_SIG\", \"url\": \"$LINUX_URL\"}" >> latest.json
            first=false
          fi
          
          if [ -n "$MAC_URL" ] && [ -n "$MAC_SIG" ]; then
            [ "$first" = "false" ] && echo "," >> latest.json
            echo "    \"darwin-universal\": {\"signature\": \"$MAC_SIG\", \"url\": \"$MAC_URL\"}" >> latest.json
          fi
          
          cat >> latest.json <<EOF
            }
          }
          EOF
          
          cat latest.json

      - name: Upload latest.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd assets
          gh release upload "$GITHUB_REF_NAME" latest.json --clobber --repo "$GITHUB_REPOSITORY"
