import { useState, useEffect } from 'react';
import { invoke } from '@tauri-apps/api/core';
import './MCPManager.css';

interface TransportType {
  type: string;
  command: string;
  args: string[];
  env?: Record<string, string>;
}

interface MCPServer {
  name: string;
  title: string;
  transport_type: TransportType;
  uuid?: string;
  cached_at?: string;
}

interface RuleMemory {
  name: string;
  content: string;
  is_autogenerated: boolean;
}

interface Rule {
  name: string;
  title: string;
  memory: RuleMemory;
  cached_at?: string;
}

function MCPManager() {
  const [activeTab, setActiveTab] = useState<'mcp' | 'rules'>('mcp');
  const [mcpServers, setMcpServers] = useState<MCPServer[]>([]);
  const [rules, setRules] = useState<Rule[]>([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<{ type: 'success' | 'error', text: string } | null>(null);

  const [showMcpForm, setShowMcpForm] = useState(false);
  const [showRuleForm, setShowRuleForm] = useState(false);
  const [showImportForm, setShowImportForm] = useState(false);
  const [importJson, setImportJson] = useState('');
  const [editingMcp, setEditingMcp] = useState<MCPServer | null>(null);
  const [editingRule, setEditingRule] = useState<Rule | null>(null);
  const [expandedRules, setExpandedRules] = useState<Set<string>>(new Set());

  // MCP 表单
  const [newMcp, setNewMcp] = useState({
    name: '',
    type: 'stdio',
    command: '',
    args: '',
    env: '',
  });

  // 规则表单
  const [newRule, setNewRule] = useState({
    name: '',
    content: '',
  });

  // 加载数据
  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const [mcps, rls] = await Promise.all([
        invoke<MCPServer[]>('get_mcp_services'),
        invoke<Rule[]>('get_rules'),
      ]);
      setMcpServers(mcps);
      setRules(rls);
    } catch (error) {
      setMessage({ type: 'error', text: `加载失败: ${error}` });
    } finally {
      setLoading(false);
    }
  };

  // 添加 MCP 服务器
  const handleAddMcp = async () => {
    if (!newMcp.name || !newMcp.command) {
      setMessage({ type: 'error', text: '请填写名称和命令' });
      return;
    }

    try {
      setLoading(true);
      const mcp: MCPServer = {
        name: newMcp.name,
        title: newMcp.name,
        transport_type: {
          type: newMcp.type,
          command: newMcp.command,
          args: newMcp.args.split(',').map(s => s.trim()).filter(s => s),
          env: newMcp.env ? JSON.parse(newMcp.env) : {},
        },
      };

      await invoke('save_mcp_service', { service: mcp });
      setMessage({ type: 'success', text: 'MCP 服务已添加' });
      setNewMcp({ name: '', type: 'stdio', command: '', args: '', env: '' });
      setShowMcpForm(false);
      await loadData();
    } catch (error) {
      setMessage({ type: 'error', text: `添加失败: ${error}` });
    } finally {
      setLoading(false);
    }
  };

  // 添加规则
  const handleAddRule = async () => {
    if (!newRule.name || !newRule.content) {
      setMessage({ type: 'error', text: '请填写规则名称和内容' });
      return;
    }

    try {
      setLoading(true);
      const rule: Rule = {
        name: newRule.name,
        title: newRule.name,
        memory: {
          name: newRule.name,
          content: newRule.content,
          is_autogenerated: false,
        },
      };

      await invoke('save_rule', { rule });
      setMessage({ type: 'success', text: '规则已添加' });
      setNewRule({ name: '', content: '' });
      setShowRuleForm(false);
      await loadData();
    } catch (error) {
      setMessage({ type: 'error', text: `添加失败: ${error}` });
    } finally {
      setLoading(false);
    }
  };

  // 删除 MCP
  const deleteMcp = async (name: string) => {
    if (!confirm(`确定删除 MCP 服务 "${name}"？`)) return;

    try {
      setLoading(true);
      await invoke('delete_mcp_service', { name });
      setMessage({ type: 'success', text: 'MCP 服务已删除' });
      await loadData();
    } catch (error) {
      setMessage({ type: 'error', text: `删除失败: ${error}` });
    } finally {
      setLoading(false);
    }
  };

  // 开始编辑 MCP
  const startEditMcp = (mcp: MCPServer) => {
    setEditingMcp(mcp);
    setNewMcp({
      name: mcp.name,
      type: mcp.transport_type.type,
      command: mcp.transport_type.command,
      args: mcp.transport_type.args.join(', '),
      env: mcp.transport_type.env ? JSON.stringify(mcp.transport_type.env, null, 2) : '',
    });
    setShowMcpForm(true);
  };

  // 取消编辑 MCP
  const cancelEditMcp = () => {
    setEditingMcp(null);
    setNewMcp({ name: '', type: 'stdio', command: '', args: '', env: '' });
    setShowMcpForm(false);
  };

  // 保存编辑的 MCP
  const saveEditedMcp = async () => {
    if (!editingMcp || !newMcp.name || !newMcp.command) {
      setMessage({ type: 'error', text: '请填写名称和命令' });
      return;
    }

    try {
      setLoading(true);
      const mcp: MCPServer = {
        name: newMcp.name,
        title: newMcp.name,
        transport_type: {
          type: newMcp.type,
          command: newMcp.command,
          args: newMcp.args.split(',').map(s => s.trim()).filter(s => s),
          env: newMcp.env ? JSON.parse(newMcp.env) : {},
        },
        uuid: editingMcp.uuid,
      };

      await invoke('save_mcp_service', { service: mcp });
      setMessage({ type: 'success', text: 'MCP 服务已更新' });
      cancelEditMcp();
      await loadData();
    } catch (error) {
      setMessage({ type: 'error', text: `更新失败: ${error}` });
    } finally {
      setLoading(false);
    }
  };

  // 开始编辑规则
  const startEditRule = (rule: Rule) => {
    setEditingRule(rule);
    setNewRule({
      name: rule.name,
      content: rule.memory.content,
    });
    setShowRuleForm(true);
  };

  // 取消编辑规则
  const cancelEditRule = () => {
    setEditingRule(null);
    setNewRule({ name: '', content: '' });
    setShowRuleForm(false);
  };

  // 保存编辑的规则
  const saveEditedRule = async () => {
    if (!editingRule || !newRule.name || !newRule.content) {
      setMessage({ type: 'error', text: '请填写规则名称和内容' });
      return;
    }

    try {
      setLoading(true);
      const rule: Rule = {
        name: newRule.name,
        title: newRule.name,
        memory: {
          name: newRule.name,
          content: newRule.content,
          is_autogenerated: editingRule.memory.is_autogenerated,
        },
      };

      await invoke('save_rule', { rule });
      setMessage({ type: 'success', text: '规则已更新' });
      cancelEditRule();
      await loadData();
    } catch (error) {
      setMessage({ type: 'error', text: `更新失败: ${error}` });
    } finally {
      setLoading(false);
    }
  };

  // 切换规则展开/收起
  const toggleRuleExpand = (name: string) => {
    const newExpanded = new Set(expandedRules);
    if (newExpanded.has(name)) {
      newExpanded.delete(name);
    } else {
      newExpanded.add(name);
    }
    setExpandedRules(newExpanded);
  };

  // 删除规则
  const deleteRule = async (name: string) => {
    if (!confirm(`确定删除规则 "${name}"？`)) return;

    try {
      setLoading(true);
      await invoke('delete_rule', { name });
      setMessage({ type: 'success', text: '规则已删除' });
      await loadData();
    } catch (error) {
      setMessage({ type: 'error', text: `删除失败: ${error}` });
    } finally {
      setLoading(false);
    }
  };

  // 应用单个 MCP 到云端
  const applyMcpToCloud = async (mcp: MCPServer) => {
    try {
      setLoading(true);
      await invoke('upload_mcp_auto', { service: mcp });
      setMessage({ type: 'success', text: `MCP "${mcp.title}" 已应用到云端` });
    } catch (error) {
      setMessage({ type: 'error', text: `应用失败: ${error}` });
    } finally {
      setLoading(false);
    }
  };

  // 应用单个规则到云端
  const applyRuleToCloud = async (rule: Rule) => {
    try {
      setLoading(true);
      await invoke('upload_rule_auto', { rule });
      setMessage({ type: 'success', text: `规则 "${rule.title}" 已应用到云端` });
    } catch (error) {
      setMessage({ type: 'error', text: `应用失败: ${error}` });
    } finally {
      setLoading(false);
    }
  };

  // 批量应用所有 MCP 到云端
  const applyAllMcpToCloud = async () => {
    if (mcpServers.length === 0) {
      setMessage({ type: 'error', text: '没有 MCP 服务可以应用' });
      return;
    }

    if (!confirm(`确定将所有 ${mcpServers.length} 个 MCP 服务应用到当前 Warp 账号？`)) return;

    try {
      setLoading(true);
      let success = 0;
      let failed = 0;

      for (const mcp of mcpServers) {
        try {
          await invoke('upload_mcp_auto', { service: mcp });
          success++;
        } catch {
          failed++;
        }
      }

      setMessage({ 
        type: failed > 0 ? 'error' : 'success', 
        text: `应用完成：成功 ${success} 个，失败 ${failed} 个` 
      });
    } finally {
      setLoading(false);
    }
  };

  // 导入 JSON 配置
  const handleImportJson = async () => {
    if (!importJson.trim()) {
      setMessage({ type: 'error', text: '请输入 JSON 配置' });
      return;
    }

    try {
      setLoading(true);
      const parsed = JSON.parse(importJson);
      let mcpImported = 0;
      let ruleImported = 0;
      let failed = 0;
      const errors: string[] = [];

      // 检测格式：完整 Warp 导出格式
      if (parsed.mcp_services || parsed.rules) {
        // 导入 MCP
        if (parsed.mcp_services) {
          for (const [name, config] of Object.entries(parsed.mcp_services)) {
            try {
              const mcpConfig = config as any;
              const transport = mcpConfig.transport_type?.CLIServer;
              
              if (!transport?.command) {
                errors.push(`MCP ${name}: 缺少 command`);
                failed++;
                continue;
              }

              // 转换环境变量格式
              const envVars: Record<string, string> = {};
              if (Array.isArray(transport.static_env_vars)) {
                transport.static_env_vars.forEach((envVar: any) => {
                  if (envVar.name) {
                    envVars[envVar.name] = envVar.value || '';
                  }
                });
              }

              const mcp: MCPServer = {
                name: mcpConfig.name || name,
                title: mcpConfig.title || name,
                transport_type: {
                  type: 'stdio',
                  command: transport.command,
                  args: transport.args || [],
                  env: Object.keys(envVars).length > 0 ? envVars : undefined,
                },
                uuid: mcpConfig.uuid || crypto.randomUUID(),
              };

              await invoke('save_mcp_service', { service: mcp });
              mcpImported++;
            } catch (err) {
              const errMsg = err instanceof Error ? err.message : String(err);
              console.error(`导入 MCP ${name} 失败:`, err);
              errors.push(`MCP ${name}: ${errMsg}`);
              failed++;
            }
          }
        }

        // 导入规则
        if (parsed.rules) {
          for (const [name, ruleConfig] of Object.entries(parsed.rules)) {
            try {
              const ruleData = ruleConfig as any;
              
              if (!ruleData.content) {
                errors.push(`规则 ${name}: 缺少 content`);
                failed++;
                continue;
              }

              const rule: Rule = {
                name: ruleData.name || name,
                title: ruleData.title || name,
                memory: {
                  name: ruleData.name || name,
                  content: ruleData.content,
                  is_autogenerated: ruleData.is_autogenerated || false,
                },
              };

              await invoke('save_rule', { rule });
              ruleImported++;
            } catch (err) {
              const errMsg = err instanceof Error ? err.message : String(err);
              console.error(`导入规则 ${name} 失败:`, err);
              errors.push(`规则 ${name}: ${errMsg}`);
              failed++;
            }
          }
        }
      } else {
        // 简单格式：{name: {command, args, env}}
        for (const [name, config] of Object.entries(parsed)) {
          try {
            const mcpConfig = config as any;
            
            if (!mcpConfig.command) {
              errors.push(`${name}: 缺少 command`);
              failed++;
              continue;
            }

            const envVars: Record<string, string> = {};
            if (mcpConfig.env && typeof mcpConfig.env === 'object') {
              Object.assign(envVars, mcpConfig.env);
            }

            const mcp: MCPServer = {
              name,
              title: name,
              transport_type: {
                type: 'stdio',
                command: mcpConfig.command,
                args: mcpConfig.args || [],
                env: Object.keys(envVars).length > 0 ? envVars : undefined,
              },
              uuid: crypto.randomUUID(),
            };

            await invoke('save_mcp_service', { service: mcp });
            mcpImported++;
          } catch (err) {
            const errMsg = err instanceof Error ? err.message : String(err);
            console.error(`导入 ${name} 失败:`, err);
            errors.push(`${name}: ${errMsg}`);
            failed++;
          }
        }
      }

      if (errors.length > 0) {
        console.error('导入错误:', errors);
      }

      const total = mcpImported + ruleImported;
      setMessage({ 
        type: failed > 0 ? 'error' : 'success', 
        text: `导入完成：${mcpImported} 个 MCP、${ruleImported} 条规则，失败 ${failed} 个${errors.length > 0 ? ' (详见控制台)' : ''}` 
      });
      
      if (total > 0) {
        setImportJson('');
        setShowImportForm(false);
        await loadData();
      }
    } catch (error) {
      const errMsg = error instanceof Error ? error.message : String(error);
      setMessage({ type: 'error', text: `JSON 解析失败: ${errMsg}` });
    } finally {
      setLoading(false);
    }
  };

  // 一键应用所有 MCP 和规则到云端
  const applyAllToCloud = async () => {
    const totalCount = mcpServers.length + rules.length;
    if (totalCount === 0) {
      setMessage({ type: 'error', text: '没有配置可以应用' });
      return;
    }

    if (!confirm(`确定将所有配置（${mcpServers.length} 个 MCP + ${rules.length} 条规则）应用到当前 Warp 账号？`)) return;

    try {
      setLoading(true);
      let mcpSuccess = 0;
      let ruleSuccess = 0;
      let failed = 0;

      // 应用所有 MCP
      for (const mcp of mcpServers) {
        try {
          await invoke('upload_mcp_auto', { service: mcp });
          mcpSuccess++;
        } catch {
          failed++;
        }
      }

      // 应用所有规则
      for (const rule of rules) {
        try {
          await invoke('upload_rule_auto', { rule });
          ruleSuccess++;
        } catch {
          failed++;
        }
      }

      setMessage({ 
        type: failed > 0 ? 'error' : 'success', 
        text: `应用完成：${mcpSuccess} 个 MCP、${ruleSuccess} 条规则，失败 ${failed} 个` 
      });
    } finally {
      setLoading(false);
    }
  };

  // 批量应用所有规则到云端
  const applyAllRulesToCloud = async () => {
    if (rules.length === 0) {
      setMessage({ type: 'error', text: '没有规则可以应用' });
      return;
    }

    if (!confirm(`确定将所有 ${rules.length} 条规则应用到当前 Warp 账号？`)) return;

    try {
      setLoading(true);
      let success = 0;
      let failed = 0;

      for (const rule of rules) {
        try {
          await invoke('upload_rule_auto', { rule });
          success++;
        } catch {
          failed++;
        }
      }

      setMessage({ 
        type: failed > 0 ? 'error' : 'success', 
        text: `应用完成：成功 ${success} 条，失败 ${failed} 条` 
      });
    } finally {
      setLoading(false);
    }
  };

  // 自动清除消息
  useEffect(() => {
    if (message) {
      const timer = setTimeout(() => setMessage(null), 3000);
      return () => clearTimeout(timer);
    }
  }, [message]);

  return (
    <div className="mcp-manager page-content">
      <h2>MCP 和规则管理</h2>

      {message && (
        <div className={`message message-${message.type}`}>
          {message.text}
        </div>
      )}

      {/* 标签切换 */}
      <div className="tabs-container">
        <div className="tabs">
          <button 
            className={`tab ${activeTab === 'mcp' ? 'active' : ''}`}
            onClick={() => setActiveTab('mcp')}
          >
            MCP 服务器 ({mcpServers.length})
          </button>
          <button 
            className={`tab ${activeTab === 'rules' ? 'active' : ''}`}
            onClick={() => setActiveTab('rules')}
          >
            规则管理 ({rules.length})
          </button>
        </div>
        <button 
          className="apply-all-global-btn" 
          onClick={applyAllToCloud} 
          disabled={loading || (mcpServers.length === 0 && rules.length === 0)}
        >
          ☁️ 一键应用所有 ({mcpServers.length + rules.length})
        </button>
      </div>

      {/* MCP 服务器管理 */}
      {activeTab === 'mcp' && (
        <div className="tab-content">
          <div className="header-actions">
            <button className="add-btn" onClick={() => setShowMcpForm(!showMcpForm)} disabled={loading}>
              ➕ 添加 MCP 服务器
            </button>
            <button className="import-btn" onClick={() => setShowImportForm(!showImportForm)} disabled={loading}>
              📥 导入 JSON
            </button>
            <button className="apply-all-btn" onClick={applyAllMcpToCloud} disabled={loading || mcpServers.length === 0}>
              ☁️ 全部应用到云端
            </button>
          </div>

          {showImportForm && (
            <div className="form-card">
              <h3>导入 MCP 配置</h3>
              <div className="form-group">
                <label>JSON 配置 *</label>
                <textarea 
                  value={importJson}
                  onChange={(e) => setImportJson(e.target.value)}
                  placeholder='{"mcp_services": {...}, "rules": {...}}'
                  rows={12}
                  style={{ fontFamily: 'monospace', fontSize: '13px' }}
                />
                <div style={{ fontSize: '12px', color: '#666', marginTop: '8px' }}>
                  支持两种格式：<br />
                  1. 完整导出：<code>{'{"mcp_services": {...}, "rules": {...}}'}</code><br />
                  2. 简单格式：<code>{'{"name": {"command": "...", "args": [...]}}'}</code>
                </div>
              </div>
              <div className="form-actions">
                <button className="btn-primary" onClick={handleImportJson} disabled={loading}>
                  {loading ? '导入中...' : '导入'}
                </button>
                <button className="btn-secondary" onClick={() => setShowImportForm(false)}>取消</button>
              </div>
            </div>
          )}

          {showMcpForm && (
            <div className="form-card">
              <h3>{editingMcp ? '编辑 MCP 服务器' : '添加 MCP 服务器'}</h3>
              <div className="form-group">
                <label>服务名称 *</label>
                <input 
                  type="text"
                  value={newMcp.name}
                  onChange={(e) => setNewMcp({ ...newMcp, name: e.target.value })}
                  placeholder="例如: Filesystem Server"
                />
              </div>
              <div className="form-group">
                <label>传输类型</label>
                <select 
                  value={newMcp.type}
                  onChange={(e) => setNewMcp({ ...newMcp, type: e.target.value })}
                >
                  <option value="stdio">stdio</option>
                  <option value="sse">sse</option>
                </select>
              </div>
              <div className="form-group">
                <label>命令 *</label>
                <input 
                  type="text"
                  value={newMcp.command}
                  onChange={(e) => setNewMcp({ ...newMcp, command: e.target.value })}
                  placeholder="例如: npx"
                />
              </div>
              <div className="form-group">
                <label>参数（用逗号分隔）</label>
                <input 
                  type="text"
                  value={newMcp.args}
                  onChange={(e) => setNewMcp({ ...newMcp, args: e.target.value })}
                  placeholder="例如: -y, @modelcontextprotocol/server-filesystem, /path"
                />
              </div>
              <div className="form-group">
                <label>环境变量（JSON 格式，可选）</label>
                <textarea
                  value={newMcp.env}
                  onChange={(e) => setNewMcp({ ...newMcp, env: e.target.value })}
                  placeholder='例如: {"KEY": "value"}'
                  rows={3}
                />
              </div>
              <div className="form-actions">
                <button className="btn-primary" onClick={editingMcp ? saveEditedMcp : handleAddMcp} disabled={loading}>
                  {loading ? (editingMcp ? '保存中...' : '添加中...') : (editingMcp ? '保存' : '添加')}
                </button>
                <button className="btn-secondary" onClick={editingMcp ? cancelEditMcp : () => setShowMcpForm(false)}>取消</button>
              </div>
            </div>
          )}

          <div className="list">
            {mcpServers.length === 0 && !loading && (
              <div className="empty-state">暂无 MCP 服务器配置</div>
            )}
            {mcpServers.map(mcp => (
              <div key={mcp.name} className="list-item">
                <div className="item-header">
                  <div className="item-title">
                    <span className="status-dot enabled"></span>
                    <strong>{mcp.title}</strong>
                  </div>
                  <div className="item-actions">
                    <button className="edit-btn" onClick={() => startEditMcp(mcp)} disabled={loading}>
                      ✏️ 编辑
                    </button>
                    <button className="apply-btn" onClick={() => applyMcpToCloud(mcp)} disabled={loading}>
                      ☁️ 应用到云端
                    </button>
                    <button className="delete-btn" onClick={() => deleteMcp(mcp.name)} disabled={loading}>
                      🗑️ 删除
                    </button>
                  </div>
                </div>
                <div className="item-details">
                  <div><strong>类型:</strong> {mcp.transport_type.type}</div>
                  <div><strong>命令:</strong> {mcp.transport_type.command}</div>
                  <div><strong>参数:</strong> {mcp.transport_type.args.join(', ')}</div>
                  {mcp.cached_at && <div className="cached-time">缓存时间: {new Date(mcp.cached_at).toLocaleString()}</div>}
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* 规则管理 */}
      {activeTab === 'rules' && (
        <div className="tab-content">
          <div className="header-actions">
            <button className="add-btn" onClick={() => setShowRuleForm(!showRuleForm)} disabled={loading}>
              ➕ 添加规则
            </button>
            <button className="apply-all-btn" onClick={applyAllRulesToCloud} disabled={loading || rules.length === 0}>
              ☁️ 全部应用到云端
            </button>
          </div>

          {showRuleForm && (
            <div className="form-card">
              <h3>{editingRule ? '编辑规则' : '添加规则'}</h3>
              <div className="form-group">
                <label>规则名称 *</label>
                <input 
                  type="text"
                  value={newRule.name}
                  onChange={(e) => setNewRule({ ...newRule, name: e.target.value })}
                  placeholder="例如: 代码格式化规则"
                />
              </div>
              <div className="form-group">
                <label>规则内容 *</label>
                <textarea 
                  value={newRule.content}
                  onChange={(e) => setNewRule({ ...newRule, content: e.target.value })}
                  placeholder="输入规则内容..."
                  rows={6}
                />
              </div>
              <div className="form-actions">
                <button className="btn-primary" onClick={editingRule ? saveEditedRule : handleAddRule} disabled={loading}>
                  {loading ? (editingRule ? '保存中...' : '添加中...') : (editingRule ? '保存' : '添加')}
                </button>
                <button className="btn-secondary" onClick={editingRule ? cancelEditRule : () => setShowRuleForm(false)}>取消</button>
              </div>
            </div>
          )}

          <div className="list">
            {rules.length === 0 && !loading && (
              <div className="empty-state">暂无规则配置</div>
            )}
            {rules.map(rule => {
              const isExpanded = expandedRules.has(rule.name);
              
              return (
                <div key={rule.name} className="list-item">
                  <div className="item-header">
                    <div className="item-title">
                      <span className={`status-dot ${rule.memory.is_autogenerated ? 'disabled' : 'enabled'}`}></span>
                      <strong>{rule.title}</strong>
                      {rule.memory.is_autogenerated && <span className="badge">自动生成</span>}
                    </div>
                    <div className="item-actions">
                      <button className="edit-btn" onClick={() => startEditRule(rule)} disabled={loading}>
                        ✏️ 编辑
                      </button>
                      <button className="apply-btn" onClick={() => applyRuleToCloud(rule)} disabled={loading}>
                        ☁️ 应用到云端
                      </button>
                      <button className="delete-btn" onClick={() => deleteRule(rule.name)} disabled={loading}>
                        🗑️ 删除
                      </button>
                    </div>
                  </div>
                  {isExpanded && (
                    <div className="item-details">
                      <div className="rule-content">
                        {rule.memory.content}
                      </div>
                      {rule.cached_at && <div className="cached-time">缓存时间: {new Date(rule.cached_at).toLocaleString()}</div>}
                    </div>
                  )}
                  <button 
                    className="expand-btn" 
                    onClick={() => toggleRuleExpand(rule.name)}
                  >
                    {isExpanded ? '▲ 收起' : '▼ 展开查看全部'}
                  </button>
                </div>
              );
            })}
          </div>
        </div>
      )}

      {/* 广告栏 */}
      <div className="ad-banner">
        <span className="ad-icon">🎁</span>
        <span className="ad-text">购买 Warp 2500 额度账户</span>
        <span className="ad-price">💰 <strong>1元</strong>/个</span>
        <span className="ad-group">
          QQ群: 
          <a 
            href="https://qm.qq.com/q/vi1EFO0mxG" 
            target="_blank" 
            rel="noopener noreferrer"
            className="ad-group-link"
          >
            1014952167
          </a>
        </span>
      </div>
    </div>
  );
}

export default MCPManager;
